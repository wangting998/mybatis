<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace为命名空间，功能是对sql语句进行分类管理，隔离sql语句-->
<!--UserMapper_.xml 文件中的 namespace 与 Usermapper 接口的类路径相同-->
<mapper namespace="UserTest">
    <!--需求：通过id查询用户信息-->
    <!--根据id获取用户信息
    id:标识映射文件中的sql
    将sql语句封装到mappedStatement对象中，所以id称为statement的id
    parameterType:指定输入参数类型
    #{}：表示占位符
    #{id}：id表示接收输入的参数，名称是id
    如果输入参数是简单类型，参数名可以任意，如value或其它名称10
    resultType:指定sql输出结果映射的java对象类型
    select 指定resultType表示将单条记录映射成java对象
    -->
    <select id="findUserById" parameterType="int" resultType="com.bh.pojo.User">
        select * from user where id=#{id }
    </select>

    <!--根据用户名称模糊查询，结果可能是多条数据
        resultType:指定映射 java 对象类型
        ${}:拼接 sql 语句，把接收的参数数据拼接在 sql 中
        ${value}:接收输入参数，若是简单类型，${}中只能使用 value
    -->
    <select id="findUserByName" parameterType="String" resultType="com.bh.pojo.User">
            select * from USER where username like '%${value}%'
    </select>

    <!--添加用户-->
    <insert id="insertUser" parameterType="com.bh.pojo.User">
        <!-- selectKey将主键返回
            keyProperty:返回的主键存储在 pojo 中的属性
            order：selectKey 的执行顺序，是相对与 insert 语句来说，
                    由于 mysql 的自增原理执行完 insert 语句之后才将
                    主键生成，所以这里 selectKey 的执行顺序为 after。
            resultType:返回的主键类型
        -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            /*LAST_INSERT_ID():是 mysql 的函数，返回 auto_increment 自增列新记录 id 值。*/
            select LAST_INSERT_ID()
        </selectKey>
        insert into user (username,birthday,sex,address) values
        (#{username},#{birthday},#{sex},#{address})
    </insert>

    <!---删除数据-->
    <delete id="deleteUserById" parameterType="com.bh.pojo.User">
        delete from user where id = #{id}
    </delete>

    <!--修改数据-->
    <update id="updateUser" parameterType="com.bh.pojo.User">
        update user set username=#{username},birthday=#{birthday},sex=#{sex},
        address=#{address} where id=#{id}
    </update>
</mapper>