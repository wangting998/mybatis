<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace为命名空间，功能是对sql语句进行分类管理，隔离sql语句-->
<!--UserMapper.xml 文件中的 namespace 与 Usermapper 接口的类路径相同-->
<mapper namespace="com.bh.mapper.UserMapper">
    <!--需求：通过id查询用户信息-->
    <select id="findUserById" parameterType="int" resultType="com.bh.pojo.User">
        select * from user where id=#{id}
    </select>

    <!--根据用户名称模糊查询，结果可能是多条数据
        resultType:指定映射 java 对象类型
        ${}:拼接 sql 语句，把接收的参数数据拼接在 sql 中
        ${value}:接收输入参数，若是简单类型，${}中只能使用 value
    -->
    <select id="findUserByName" parameterType="String" resultType="com.bh.pojo.User">
        select * from USER where username like '%${value}%'
    </select>

    <!--传递简单类型
        传递pojo对象综合查询用户信息-->
    <!--因为在mybatis-config.xml中配置了扫描包、别名，所以返回类型可简写为user-->
    <select id="findUserByUser" parameterType="user" resultType="user">
        select * from user where id=#{id} or username like '%${username}%'
    </select>

    <!--传递 pojo 包装对象 用户综合信息查询用户列表 方式一：-->
    <!--<select id="findUserList" parameterType="com.bh.vo.UserQueryVo" resultType="com.bh.pojo.User">
        select * from user where username=#{user.username} or sex=#{user.sex};
    </select>-->

    <!--用户综合信息查询————用户列表 方式二：-->
    <!--<select id="findUserList" parameterType="com.bh.vo.UserQueryVo" resultType="com.bh.pojo.User">
        select * from user
        where 1 = 1
        <if test="userCustom!=null">
            <if test="userCustom.sex!=null and userCustom.sex!=''">
                and user.sex=#{userCustom.sex}
            </if>
            <if test="userCustom.username!=null and userCustom.username!=''">
                and user.username like '%${userCustom.username}%'
            </if>
        </if>
    </select>-->

    <!--用户综合信息查询————用户列表 方式三：-->
    <select id="findUserList" parameterType="com.bh.vo.UserQueryVo" resultType="com.bh.pojo.User">
        select * from user
        <!--与if标签不同的是：<where/>标签可自动处理第一个and，更简单一些-->
        <where>
            <include refid="query_user_where"></include>
        </where>
    </select>
    <!--Sql 片段    Sql 中可将重复的 sql 提取出来，使用时用include引用即可-->
    <sql id="query_user_where">
        <if test="userCustom!=null">
            <if test="userCustom.sex!=null and userCustom.sex!=''">
                and user.sex=#{userCustom.sex}
            </if>
            <if test="userCustom.username!=null and userCustom.username!=''">
                and user.username like '%${userCustom.username}%'
            </if>
        </if>
    </sql>


    <!--通过 pojo 传递 list-->
    <select id="selectUserByList" parameterType="java.util.List" resultType="com.bh.pojo.User">
        select * from user
        <where>
            <if test="ids!=null and ids.size>0">
                <foreach collection="ids" open=" and id in(" close=")" item="id" separator="," >
                    #{id}
                </foreach>
            </if>
        </where>
    </select>
    <!--传递单个List
        传递 List 类型 mapper.xml 没有区别，
        唯一不同的是只有一个 List 参数时它的参数名为 list
    -->
    <select id="selectUserByList1" parameterType="java.util.List" resultType="com.bh.pojo.User">
        select * from user
        <where>
            <!-- 传递List，List中是pojo -->
            <if test="list!=null">
                <foreach collection="list"  item="item" open=" and id in("  close=")" separator="," >
                    #{item.id}
                </foreach>
            </if>
        </where>
    </select>

    <!--递单个数组（数组中是 pojo）-->
    <!--<select id="selectUserByArray" parameterType="Object[]" resultType="com.bh.pojo.User">
        select * from user
        <where>
            &lt;!&ndash; 传递数组 &ndash;&gt;
            <if test="array!=null">
                &lt;!&ndash; sql 只接收一个数组参数，sql 解析参数名称 mybatis 固定为 array，
                    如果数组是通过 pojo 传递到 sql 则参数的名称为 pojo 中的属性名
                    index：为数组的下标。
                    item：为数组每个元素的名称，名称随意定义
                    open：循环开始
                    close：循环结束
                    separator：中间分隔输出
                &ndash;&gt;
                <foreach collection="array" index="index" item="item" open=" and id in(" separator="," close=")"  >
                    #{item.id}
                </foreach>
            </if>
        </where>
    </select>-->
    <!--传递单个数组（数组中是字符串类型）-->
    <select id="selectUserByArray" parameterType="Object[]" resultType="com.bh.pojo.User">
        select * from user
        <where>
            <!-- 传递数组 -->
            <if test="array!=null">
                <foreach collection="array" index="index" item="item" open=" and id in(" separator="," close=")"  >
                    #{item}
                </foreach>
            </if>
        </where>
    </select>


    <!---传递 HashMap 综合查询用户信息-->
    <select id="findUserByHashMap" parameterType="java.util.Map" resultType="com.bh.pojo.User">
        select * from user where id=#{id} or username like '%${username}%'
    </select>

    <!--resultType(输出类型)
        输出简单类型-->
    <select id="findUserByCount" parameterType="com.bh.pojo.User" resultType="int">
        select count(1) from user
    </select>

    <!--根据 id 查询用户信息，使用 resultMap 输出-->
    <select id="findUserByIdResultMap" parameterType="com.bh.pojo.User" resultMap="userListResultMap">
        select id id_,username username_,birthday birthday_ from
        user where id=#{value}
    </select>
    <!--定义 resultMap,完成查询字段与 user 对象属性名称做对应关系
     type:最终映射的 java 对象
     id:resultMap 的唯一标识
    -->
    <resultMap id="userListResultMap" type="com.bh.pojo.User">
        <!--id 标签：查询结果集的唯一标识列（主键或是唯一标识）
         column:sql 查询字段名（列名）
         property:pojo 属性名
         -->
        <id column="id_" property="id"/>
        <result column="username_" property="username"/>
        <result column="birthday_" property="birthday"/>
    </resultMap>



    <!--添加用户-->
    <insert id="insertUser" parameterType="com.bh.pojo.User">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            <!--LAST_INSERT_ID():是 mysql 的函数，返回 auto_increment 自增列新记录 id 值.-->
            select LAST_INSERT_ID()
        </selectKey>
        insert into user (username,birthday,sex,address) values
        (#{username},#{birthday},#{sex},#{address})
    </insert>

    <!---删除数据-->
    <delete id="deleteUserById" parameterType="com.bh.pojo.User">
        delete from user where id = #{id}
    </delete>

    <!--修改数据-->
    <update id="updateUser" parameterType="com.bh.pojo.User">
        update user set username=#{username},birthday=#{birthday},sex=#{sex},
        address=#{address} where id=#{id}
    </update>
</mapper>